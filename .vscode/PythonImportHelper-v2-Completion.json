[
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "create_list",
        "kind": 2,
        "importPath": "DSA.array",
        "description": "DSA.array",
        "peekOfCode": "def create_list():\n    max_number = int(input(\"Enter number --> \"))\n    odds = []\n    for i in range(1, max_number + 1):\n        if i % 2 == 0:\n            print(i)\n            odds.append(i)\n    print(odds)\n    return\ncreate_list()",
        "detail": "DSA.array",
        "documentation": {}
    },
    {
        "label": "expenses",
        "kind": 5,
        "importPath": "DSA.array",
        "description": "DSA.array",
        "peekOfCode": "expenses = [2200, 2350, 2600, 2130, 2190]\nprint(f\"extra spent compare to January --> {expenses[1] - expenses[0]}\")\nprint(f\"expense of first quarter --> \", expenses[0] + expenses[1] + expenses[2])\nfor i in expenses:\n    if i == 2000:\n        print(\"exactly 2000 dollars match found\")\n    else:\n        print(\"exactly 2000 dollars not match\")\n# * Adding June month expense\nexpenses.append(1980)",
        "detail": "DSA.array",
        "documentation": {}
    },
    {
        "label": "heros",
        "kind": 5,
        "importPath": "DSA.array",
        "description": "DSA.array",
        "peekOfCode": "heros = [\"spider man\", \"thor\", \"hulk\", \"iron man\", \"captain america\"]\nprint(f\"Length of the list is --> {len(heros)}\")\n# * Add 'black panther' at the end of this list\nheros.append(\"black panther\")\n# * Add 'black panther' after 'hulk'\nheros.pop()\nheros.insert(3, \"black panther\")\nprint(heros)\n# * replace thor and hulk with doctor strange\nheros[1:3] = [\"doctor strange\"]",
        "detail": "DSA.array",
        "documentation": {}
    },
    {
        "label": "heros[1:3]",
        "kind": 5,
        "importPath": "DSA.array",
        "description": "DSA.array",
        "peekOfCode": "heros[1:3] = [\"doctor strange\"]\nprint(heros)\n# * Sort the heros list in alphabetical order\nheros.sort()\nprint(heros)\n\"\"\"\nCreate a list of all odd numbers between 1 and a max number. Max number is something you need to take from a user using input() function\n\"\"\"\ndef create_list():\n    max_number = int(input(\"Enter number --> \"))",
        "detail": "DSA.array",
        "documentation": {}
    },
    {
        "label": "ListNode",
        "kind": 6,
        "importPath": "python.add_two_number",
        "description": "python.add_two_number",
        "peekOfCode": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n    # Helper function to print the linked list.\n    def __str__(self):\n        result = []\n        node = self\n        while node:\n            result.append(str(node.val))",
        "detail": "python.add_two_number",
        "documentation": {}
    },
    {
        "label": "Solution",
        "kind": 6,
        "importPath": "python.add_two_number",
        "description": "python.add_two_number",
        "peekOfCode": "class Solution:\n    def addTwoNumbers(\n        self, l1: Optional[ListNode], l2: Optional[ListNode]\n    ) -> Optional[ListNode]:\n        ptr = ListNode(0)\n        s = ptr\n        c = 0\n        while l1 or l2 or c:\n            if l1:\n                c += l1.val",
        "detail": "python.add_two_number",
        "documentation": {}
    },
    {
        "label": "longest_prefix",
        "kind": 2,
        "importPath": "python.longest_common_prefix",
        "description": "python.longest_common_prefix",
        "peekOfCode": "def longest_prefix(strs: list[str]):\n    strs.sort()\n    prefix = \"\"\n    for i in range(len(strs[0])):\n        if strs[0][i] != strs[-1][i]:\n            return prefix\n        prefix += strs[0][i]\n    return prefix\nif __name__ == \"__main__\":\n    strs = [\"flower\", \"flow\", \"flight\"]",
        "detail": "python.longest_common_prefix",
        "documentation": {}
    },
    {
        "label": "is_palindrome",
        "kind": 2,
        "importPath": "python.palindrome_number",
        "description": "python.palindrome_number",
        "peekOfCode": "def is_palindrome(number):\n    original_number = number\n    compare_number = 0\n    while number > 0:\n        end_number = number % 10\n        compare_number = compare_number * 10 + end_number\n        number //= 10\n    return original_number == compare_number\nif __name__ == \"__main__\":\n    result = is_palindrome(121)",
        "detail": "python.palindrome_number",
        "documentation": {}
    },
    {
        "label": "roman_to_integer",
        "kind": 2,
        "importPath": "python.roman_to_integer",
        "description": "python.roman_to_integer",
        "peekOfCode": "def roman_to_integer(roman: str):\n    roman_numbers = {\n        \"I\": 1,\n        \"V\": 5,\n        \"X\": 10,\n        \"L\": 50,\n        \"C\": 100,\n        \"D\": 500,\n        \"M\": 1000,\n    }",
        "detail": "python.roman_to_integer",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "python.two_sum",
        "description": "python.two_sum",
        "peekOfCode": "def run(nums, target):\n    nums_index = {}\n    for index, i in enumerate(nums):\n        complement = target - i\n        if complement in nums_index:\n            return [nums_index[complement], index]\n        nums_index[i] = index\nif __name__ == \"__main__\":\n    nums = [2, 7, 11, 15]\n    target = 9",
        "detail": "python.two_sum",
        "documentation": {}
    }
]